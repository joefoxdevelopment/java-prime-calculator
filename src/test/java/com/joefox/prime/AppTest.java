/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.joefox.prime;

import java.util.stream.Stream;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AppTest {

    private App app;
    private Runner runner;

    @BeforeEach public void init() {
        this.runner = mock(Runner.class);
        this.app    = new App(this.runner);
    }

    @ParameterizedTest
    @MethodSource("provideInvalidArgsArray")
    public void testMainReturnsBeforeCalculationWithInvalidArguments(final String[] args) {
        App.main(args);
    }

    @ParameterizedTest
    @MethodSource("provideValidArgsArray")
    public void testMainRunsApp(final String[] args) {
        App.main(args);
    }

    @Test
    public void testRunCallsRunner() {
        this.app.run();
        verify(this.runner).run();
    }

    public static Stream<Arguments> provideInvalidArgsArray() {
        return Stream.of(
            Arguments.of((Object) new String[]{}),
            Arguments.of((Object) new String[]{"not a number", "5"}),
            Arguments.of((Object) new String[]{"3", "not a number"}),
            Arguments.of((Object) new String[]{"1", "5"}),
            Arguments.of((Object) new String[]{"10", "5"})
        );
    }

    public static Stream<Arguments> provideValidArgsArray() {
        return Stream.of(
            Arguments.of((Object) new String[]{"4", "5"}),
            Arguments.of((Object) new String[]{"4", "5", "all"})
        );
    }
}
